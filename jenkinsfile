pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/label: sonar-agent
spec:
  containers:
    - name: sonar-scanner
      image: sonarsource/sonar-scanner-cli:latest
      command:
        - cat
      tty: true
    - name: docker
      image: docker:latest
      command:
        - cat
      tty: true
      volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
            """
            defaultContainer 'sonar-scanner'
            idleMinutes 10
        }
    }
    environment {
        SONARQUBE_URL = 'http://sonarqube-sonarqube.sonar.svc.cluster.local:9000'  // SonarQube URL
        NEXUS_REPO = 'nexus-nexus-repository-manager.nexus:8082/nexus-images'
        IMAGE_NAME = 'weather-app'
        IMAGE_TAG = 'latest'
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/king04aman/todo-list.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    withCredentials([string(credentialsId: 'sonarscan', variable: 'SONAR_TOKEN')]) {
                        withSonarQubeEnv('sonarqube-scan') {  
                            sh '''
                            sonar-scanner \
                              -Dsonar.projectKey=weather-app \
                              -Dsonar.sources=. \
                              -Dsonar.host.url=$SONARQUBE_URL \
                              -Dsonar.login=$SONAR_TOKEN
                            '''
                        }
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline failed due to SonarQube Quality Gate: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Build & Push Image to Nexus') {
            steps {
                container('docker') {
                    withCredentials([usernamePassword(credentialsId: 'nexus-cred', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        script {
                            sh """
                            echo "Building Docker Image..."
                            docker build -t $NEXUS_REPO/$IMAGE_NAME:$IMAGE_TAG .

                            echo "Logging into Nexus..."
                            docker login -u $NEXUS_USER -p $NEXUS_PASS $NEXUS_REPO

                            echo "Pushing Image to Nexus..."
                            docker push $NEXUS_REPO/$IMAGE_NAME:$IMAGE_TAG
                            """
                        }
                    }
                }
            }
        }
    }
}
